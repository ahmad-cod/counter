{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","Counter","state","counter","increment","setState","decrement","reset","this","onClick","React","Component","seconds","time","timer","ReactDOM","render","document","getElementById","Converter","useState","km","setKm","className","type","value","onChange","e","target","toFixed","convert","setInterval","el","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,4MACJC,MAAQ,CACNC,QAAS,G,EAEXC,UAAY,WACV,EAAKC,SAAS,CAACF,QAAS,EAAKD,MAAMC,QAAU,K,EAE/CG,UAAa,WAAQ,EAAKJ,MAAMC,QAAU,EACzC,EAAKE,SAAS,CAACF,QAAS,EAAKD,MAAMC,QAAU,IAAM,EAAKE,SAAS,CAACF,QAAS,K,EAE5EI,MAAQ,WACN,EAAKF,SAAS,CAACF,QAAS,K,uDAGxB,OAAO,6BACL,yCAAc,2BAAIK,KAAKN,MAAMC,SAA7B,KACA,4BAAQM,QAASD,KAAKJ,WAAtB,iBACA,4BAAQK,QAASD,KAAKF,WAAtB,kBACA,4BAAQG,QAASD,KAAKD,OAAtB,c,GAlBgBG,IAAMC,WAsBvBC,EAAU,EACf,SAASC,IACPD,IACA,IAAME,EAAQ,oDAAyB,2BAAIF,GAA7B,YACdG,IAASC,OACPF,EACAG,SAASC,eAAe,SAM5B,SAASC,IAAa,IAAD,EACCC,mBAAS,GADV,mBACZC,EADY,KACRC,EADQ,KASnB,OAAO,yBAAKC,UAAU,aACpB,2BAAOC,KAAK,SAASC,MAAOJ,EAC5BK,SARF,SAAsBC,GACpBL,EAAMK,EAAEC,OAAOH,UAQf,4BAAKJ,EAAL,SANF,SAAiBA,GACf,OAAQA,EAAG,OAAOQ,QAAQ,GAKXC,CAAQT,GAAvB,WAfJR,IACAkB,YAAYlB,EAAM,KAkBlB,IAAMmB,EAAK,kBAAC,EAAD,MAEXjB,IAASC,OACPgB,EACAf,SAASC,eAAe,SAE1BH,IAASC,OACP,kBAACG,EAAD,MACAF,SAASC,eAAe,cDmEpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.54fdcd37.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nclass Counter extends React.Component {\n  state = {\n    counter: 0\n  }\n  increment = () => {\n    this.setState({counter: this.state.counter + 1 });\n  }\n  decrement =  () => { this.state.counter > 0 ?\n   this.setState({counter: this.state.counter - 1}) : this.setState({counter: 0})\n  }\n  reset = () => { \n    this.setState({counter: 0})\n  }\n  render(){\n    return <div>\n      <h1> Counter: <b>{this.state.counter}</b>.</h1>\n      <button onClick={this.increment}>Increment (+)</button>\n      <button onClick={this.decrement}>Decrement (--)</button>\n      <button onClick={this.reset}>Reset</button>\n    </div>\n  }\n}\nlet  seconds = 0;\nfunction time() {\n  seconds++;\n  const timer = <h4>You've been here for <b>{seconds}</b>seconds.</h4>;\n  ReactDOM.render(\n    timer,\n    document.getElementById(\"time\")\n  )\n}\ntime();\nsetInterval(time, 1000);\n\nfunction Converter() {\n  const [km, setKm] = useState(0);\n\n  function handleChange(e) {\n    setKm(e.target.value)\n  }\n  function convert(km) {\n    return (km/1.609).toFixed(2);\n  }\n  return <div className=\"converter\">\n    <input type=\"number\" value={km}\n    onChange={handleChange} />\n    <h3>{km}km is {convert(km)} miles</h3>\n  </div>\n}\n\nconst el = <Counter />;\n\nReactDOM.render(\n  el,\n  document.getElementById('root')\n);\nReactDOM.render(\n  <Converter />,\n  document.getElementById(\"converter\")\n)\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}